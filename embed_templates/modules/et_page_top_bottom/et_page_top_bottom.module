<?php

/**
 * @file
 * Contains Drupal hooks for Tracking Pixels module.
 */

/**
 * Implements hook_embed_templates_types().
 *
 * @return array
 *   List of custom embed types.
 */
function et_page_top_bottom_embed_templates_types() {
  // Create a few initial embed types.
  $custom_types = array();
  $module_path = drupal_get_path('module', 'et_page_top_bottom');

  $custom_types['facebook'] = array(
    'label' => 'Facebook',
    'form_callback' => 'et_tp_facebook_form',
    'submission_callback' => NULL,
    'renderer' => 'page_top_bottom',
    'path' => $module_path,
    'template' => 'templates/embed-templates-facebook',
  );

  $custom_types['doubleclick'] = array(
    'label' => 'Doubleclick',
    'form_callback' => 'et_tp_doubleclick_form',
    'submission_callback' => NULL,
    'renderer' => 'page_top_bottom',
    'path' => $module_path,
    'template' => 'templates/embed-templates-doubleclick',
  );

  $custom_types['twitter'] = array(
    'label' => 'Twitter',
    'form_callback' => 'et_tp_twitter_form',
    'submission_callback' => NULL,
    'renderer' => 'page_top_bottom',
    'path' => $module_path,
    'template' => 'templates/embed-templates-twitter',
  );

  return $custom_types;
}

/**
 * Creates a form element for position that all tracking pixels can use.
 *
 * @param array $data
 *
 * @return array
 */
function et_tp_get_position_element($data = array()) {
  $position_options = array(
    'top' => 'Top',
    'bottom' => 'Bottom',
  );
  return array(
    '#title' => t('Location'),
    '#type' => 'select',
    '#options' => $position_options,
    '#description' => t('Choose where on the page the embed is placed. Look at the embed code instructions to determine where it should be placed.'),
    '#default_value' => !empty($data['position']) ? $data['position'] : 0,
  );
}

/**
 * Form values for Facebook tracking pixel.
 *
 * @param array $data
 *
 * @return array
 */
function et_tp_facebook_form(&$form, &$form_state, $id = NULL, $data = array()) {

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#weight' => -10,
  );

  $form['options']['account_id'] = array(
    '#title' => t('ID'),
    '#description' => t('The ID of tracking pixel.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['account_id']) ? $data['account_id'] : '',
    '#required' => TRUE,
  );

  $form['options']['action'] = array(
    '#title' => t('Action'),
    '#description' => t('An optional activity being tracked. "Pageview" is already added to the code.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['action']) ? $data['action'] : '',
  );

  $form['options']['position'] = et_tp_get_position_element($data);
}

function et_tp_doubleclick_form(&$form, &$form_state, $id = NULL, $data = array()) {

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#weight' => -10,
  );

  $form['options']['account_id'] = array(
    '#title' => t('ID'),
    '#description' => t('Your Campaign ID.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['account_id']) ? $data['account_id'] : '',
    '#required' => TRUE,
  );

  $form['options']['activity'] = array(
    '#title' => t('Activity'),
    '#description' => t('Activity name of this tag.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['activity']) ? $data['activity'] : '',
  );

  $form['options']['creation'] = array(
    '#title' => t('Creation Date'),
    '#description' => t('Creation date of this campaign.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['creation']) ? $data['creation'] : '',
  );

  $form['options']['url'] = array(
    '#title' => t('URL'),
    '#description' => t('URL where tracking pixel will be added.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['url']) ? $data['url'] : '',
  );

  $form['options']['position'] = et_tp_get_position_element($data);
}

function et_tp_twitter_form (&$form, &$form_state, $id = NULL, $data = array()) {

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#weight' => -10,
  );

  $form['options']['account_id'] = array(
    '#title' => t('ID'),
    '#description' => t('Your Campaign ID.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['account_id']) ? $data['account_id'] : '',
    '#required' => TRUE,
  );

  $form['options']['activity'] = array(
    '#title' => t('Activity'),
    '#description' => t('Activity name of this tag.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['action']) ? $data['action'] : '',
  );

  $form['options']['position'] = et_tp_get_position_element($data);
}

/**
 * Implements hook_context_registry().
 */
function et_page_top_bottom_context_registry() {
  return array(
    'reactions' => array(
      'et_page_top_bottom' => array(
        'title' => t('Embeds'),
        'plugin' => 'et_page_top_bottom',
      ),
    ),
  );
}

/**
 * Implmenets hook_context_plugins().
 */
function et_page_top_bottom_context_plugins() {
  $plugins = array();
  $plugins['et_page_top_bottom'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'et_page_top_bottom') . '/plugins',
      'file' => 'et_page_top_bottom_context_reaction.inc',
      'class' => 'et_page_top_bottom_context_reaction',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_page_build().
 *
 * Add JS code to page in correct location: header or footer.
 *
 * @param $page
 */
function et_page_top_bottom_page_alter(&$page) {

  // Don't do anything if page is a 404.
  if (drupal_get_http_header('status') == '404 Not Found') {
    // Log this...because why not?
    watchdog('embed_templates', 'Embed Template not rendered due to 404 response. Path: !page', array('!page' => current_path()));
    return;
  }

  // If context module exists, see if there is a reaction for the page.
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('reaction', 'et_page_top_bottom')) {
      $plugin->execute($page);
    }
  }

  // Try the old fashioned way.
  $path = current_path();
  $query_options = array(
    'path' => array($path),
    'renderer' => array('page_top_bottom'),
    'status' => array('published'),
  );
  // Get published embed names.
  $matches = embed_templates_get_embeds($query_options);

  if ($matches) {
    foreach ($matches as $match) {

      $data = unserialize($match->data);
      $type = $match->type;

      // Get JS for embed.
      $js = _et_page_top_bottom_get_js($data, $type);

      // Ad weight based on position.
      $weight = $data['position'] == 'top' ? -9999 : 9999;

      // Add JS to proper section of $page array.
      $page['page_' . $data['position']]['et_page_top_bottom'][] = array(
        '#markup' => $js,
        '#weight' => $weight,
      );
    }
  }
}

/**
 * Builds JS from embed template.
 *
 * @param $embed_templates
 *
 * @return string
 */
function _et_page_top_bottom_get_js($data = array(), $type = NULL) {

  // Pass data to proper template.
  return theme('embed_templates_' . $type, $data);
}
